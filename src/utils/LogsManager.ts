import type { Bot } from '../structures/index.js';
import * as discordTranscripts from 'discord-html-transcripts';
import { type ButtonInteraction, type CommandInteraction, EmbedBuilder, type GuildChannel, type TextChannel } from 'discord.js';

import { TicketManager } from './TicketManager.js';

export class LogsManager {
    public static async logTicketCreation(
        interaction: CommandInteraction | ButtonInteraction,
        categoryLabel: string,
        client: Bot,
        ticketChannel: GuildChannel,
    ): Promise<void> {
        await LogsManager.logTicketAction(interaction, client, ticketChannel, 'üéüÔ∏è Ticket Created', '#2FF200', categoryLabel);
    }

    public static async logTicketDeletion(
        interaction: CommandInteraction | ButtonInteraction,
        client: Bot,
        _userName: string,
        categoryLabel: string,
        ticketChannel: GuildChannel,
        reason: string,
    ): Promise<void> {
        await LogsManager.logTicketAction(interaction, client, ticketChannel, '‚õî Ticket Closed', '#FF2400', categoryLabel, reason);
    }

    public static async logTicketTranscript(
        interaction: CommandInteraction | ButtonInteraction,
        client: Bot,
        ticketChannel: GuildChannel,
    ): Promise<void> {
        try {
            const config = await TicketManager.readConfigFile();
            const ticketInfo = await client.db.getTicketInfo(ticketChannel.id);
            const ticketCreator = ticketInfo ? ticketInfo.creator : interaction.user.username;
            const transcriptLogsChannel = (await client.channels.fetch(config.transcriptLogsChannelId)) as TextChannel;
            const description = `- **Transcript Generated By:** \n> ${interaction.user.username}\n\n- **Ticket Creator:** \n> ${ticketCreator}\n\n- **Ticket:** \n> ${ticketChannel.toString()} \n> (${ticketChannel.name} - ID: ${ticketChannel.id})`;

            const embed = LogsManager.createLogEmbed(interaction, ticketCreator, '#3498DB', 'üìù Transcript Generated', description);

            await LogsManager.sendTranscript(transcriptLogsChannel, embed, ticketChannel as TextChannel, client);
        } catch (error) {
            client.logger.error('Failed to log ticket transcript:', error);
        }
    }

    private static async logTicketAction(
        interaction: CommandInteraction | ButtonInteraction,
        client: Bot,
        ticketChannel: GuildChannel,
        title: string,
        color: string,
        categoryLabel: string = '',
        reason: string = '',
    ): Promise<void> {
        try {
            const config = await TicketManager.readConfigFile();
            const logChannel = await LogsManager.getLogChannel(client);
            const ticketInfo = await client.db.getTicketInfo(ticketChannel.id);
            const ticketCreator = ticketInfo ? ticketInfo.creator : interaction.user.username;

            const description = LogsManager.createDescription(interaction, ticketCreator, ticketChannel, categoryLabel, reason, title);

            const embed = LogsManager.createLogEmbed(interaction, ticketCreator, color, title, description);

            if (title === 'üìù Transcript Generated' || (title === '‚õî Ticket Closed' && config.enableTranscripts)) {
                const targetChannel = title === 'üìù Transcript Generated' ? config.transcriptLogsChannelId : config.logChannelId;
                await LogsManager.sendTranscript(
                    (await client.channels.fetch(targetChannel)) as TextChannel,
                    embed,
                    ticketChannel as TextChannel,
                    client,
                );
            } else {
                await logChannel.send({ embeds: [embed] });
            }
        } catch (error) {
            client.logger.error(`Failed to log ${title.toLowerCase()}:`, error);
        }
    }

    private static createDescription(
        interaction: CommandInteraction | ButtonInteraction,
        ticketCreator: string,
        ticketChannel: GuildChannel,
        categoryLabel: string,
        reason: string,
        title: string,
    ): string {
        const basicDescription = `- **Ticket Creator:** \n> ${ticketCreator}\n\n- **Ticket:** \n> ${ticketChannel.toString()} \n> (${ticketChannel.name} - ID: ${ticketChannel.id})`;
        if (title === '‚õî Ticket Closed') {
            const closedByDescription = `- **Closed By:** \n> ${interaction.user.username}`;
            const reasonDescription = reason ? `\n\n- **Reason:** \n> ${reason}` : '';
            return `${closedByDescription}\n\n${basicDescription}\n\n- **Category:** \n> ${categoryLabel}${reasonDescription}`;
        }
        if (title === 'üìù Transcript Generated') {
            return `- **Transcript Generated By:** \n> ${interaction.user.username}\n\n${basicDescription}`;
        }
        return `${basicDescription}\n\n- **Category:** \n> ${categoryLabel}`;
    }

    private static createLogEmbed(
        interaction: CommandInteraction | ButtonInteraction,
        userName: string,
        color: string,
        title: string,
        description: string,
    ): EmbedBuilder {
        return new EmbedBuilder()
            .setThumbnail(interaction.user.displayAvatarURL({ extension: 'png', size: 1024 }))
            .setAuthor({ name: title, iconURL: interaction.user.displayAvatarURL({ extension: 'png', size: 1024 }) })
            .setDescription(description)
            .setColor(color as any)
            .setFooter({
                text: `Action performed by ${userName}`,
                iconURL: interaction.user.displayAvatarURL({ extension: 'png', size: 1024 }),
            })
            .setTimestamp();
    }

    private static async getLogChannel(client: Bot): Promise<TextChannel> {
        const { logChannelId } = await TicketManager.readConfigFile();
        const logChannel = (await client.channels.fetch(logChannelId)) as TextChannel;
        if (!logChannel) throw new Error('Log channel not found');
        return logChannel;
    }

    private static async sendTranscript(
        logChannel: TextChannel,
        embed: EmbedBuilder,
        ticketChannel: TextChannel,
        client: Bot,
    ): Promise<void> {
        try {
            const transcript = await discordTranscripts.createTranscript(ticketChannel);
            await logChannel.send({
                embeds: [embed],
                files: [transcript],
            });
        } catch (error) {
            client.logger.error('Failed to create transcript:', error);
            await logChannel.send({
                embeds: [embed],
                content: 'Failed to create transcript.',
            });
        }
    }
}
