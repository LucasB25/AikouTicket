import type { Bot } from '../structures/index.js';
import * as discordTranscripts from 'discord-html-transcripts';
import {
    type ButtonInteraction,
    type CommandInteraction,
    EmbedBuilder,
    type GuildChannel,
    type Snowflake,
    type TextChannel,
} from 'discord.js';
import { promises as fs } from 'node:fs';
import YAML from 'yaml';

interface Config {
    logChannelId: Snowflake;
    enableTranscripts: boolean;
    transcriptLogsChannelId: Snowflake;
    enableTicketReason: boolean;
}

export class LogsManager {
    public static async logTicketCreation(
        interaction: CommandInteraction | ButtonInteraction,
        categoryLabel: string,
        client: Bot,
        ticketChannel: GuildChannel,
    ): Promise<void> {
        try {
            const logChannel = await LogsManager.getLogChannel(client);
            const embed = LogsManager.createLogEmbed(
                interaction,
                interaction.user.username,
                '#2FF200',
                '🎟️ Ticket Created',
                `- **Ticket Creator:** \n> ${interaction.user.username}\n\n- **Ticket:** \n> ${ticketChannel.toString()} \n> (${ticketChannel.name
                } - ID: ${ticketChannel.id}) \n\n- **Category:** \n> ${categoryLabel}`,
            );
            await logChannel.send({ embeds: [embed] });
        } catch (error) {
            client.logger.error('Failed to log ticket creation:', error);
        }
    }

    public static async logTicketDeletion(
        interaction: CommandInteraction | ButtonInteraction,
        client: Bot,
        userName: string,
        categoryLabel: string,
        ticketChannel: GuildChannel,
        reason: string,
    ): Promise<void> {
        try {
            const config = await LogsManager.readConfigFile();
            const logChannel = await LogsManager.getLogChannel(client);
            const description = config.enableTicketReason
                ? `- **Closed By:** \n> ${interaction.user.username}\n\n- **Ticket Creator:** \n> ${interaction.user.username}\n\n- **Ticket:** \n> ${ticketChannel.toString()} \n> (${ticketChannel.name} - ID: ${ticketChannel.id}) \n\n- **Category:** \n> ${categoryLabel}\n\n- **Reason:** \n> ${reason}`
                : `- **Closed By:** \n> ${interaction.user.username}\n\n- **Ticket Creator:** \n> ${interaction.user.username}\n\n- **Ticket:** \n> ${ticketChannel.toString()} \n> (${ticketChannel.name} - ID: ${ticketChannel.id}) \n\n- **Category:** \n> ${categoryLabel}`;

            const embed = LogsManager.createLogEmbed(interaction, userName, '#FF2400', '⛔ Ticket Closed', description);

            if (config.enableTranscripts) {
                await LogsManager.sendTranscript(logChannel, embed, ticketChannel as TextChannel, client);
            } else {
                await logChannel.send({ embeds: [embed] });
            }
        } catch (error) {
            client.logger.error('Failed to log ticket deletion:', error);
        }
    }

    public static async logTicketTranscript(
        interaction: CommandInteraction | ButtonInteraction,
        client: Bot,
        userName: string,
        ticketChannel: GuildChannel,
    ): Promise<void> {
        try {
            const config = await LogsManager.readConfigFile();
            const transcriptLogsChannel = (await client.channels.fetch(config.transcriptLogsChannelId)) as TextChannel;
            const embed = LogsManager.createLogEmbed(
                interaction,
                userName,
                '#3498DB',
                '📝 Transcript Generated',
                `- **Transcript Generated By:** \n> ${interaction.user.username}\n\n- **Ticket:** \n> ${ticketChannel.toString()} \n> (${ticketChannel.name
                } - ID: ${ticketChannel.id})`,
            );

            await LogsManager.sendTranscript(transcriptLogsChannel, embed, ticketChannel as TextChannel, client);
        } catch (error) {
            client.logger.error('Failed to log ticket transcript:', error);
        }
    }

    private static createLogEmbed(
        interaction: CommandInteraction | ButtonInteraction,
        userName: string,
        color: string,
        title: string,
        description: string,
    ): EmbedBuilder {
        const userAvatarURL = interaction.user.displayAvatarURL({ extension: 'png', size: 1024 });

        return new EmbedBuilder()
            .setThumbnail(userAvatarURL)
            .setAuthor({
                name: title,
                iconURL: userAvatarURL,
            })
            .setDescription(description)
            .setColor(color as any)
            .setFooter({
                text: `Action performed by ${userName}`,
                iconURL: userAvatarURL,
            })
            .setTimestamp();
    }

    private static async getLogChannel(client: Bot): Promise<TextChannel> {
        const { logChannelId } = await LogsManager.readConfigFile();
        const logChannel = (await client.channels.fetch(logChannelId)) as TextChannel;

        if (!logChannel) {
            throw new Error('Log channel not found');
        }

        return logChannel;
    }

    public static async readConfigFile(): Promise<Config> {
        try {
            const configFile = await fs.readFile('./config.yml', 'utf8');
            return YAML.parse(configFile) as Config;
        } catch (error) {
            throw new Error(`Failed to read config file: ${error.message}`);
        }
    }

    private static async sendTranscript(
        logChannel: TextChannel,
        embed: EmbedBuilder,
        ticketChannel: TextChannel,
        client: Bot,
    ): Promise<void> {
        try {
            const transcript = await discordTranscripts.createTranscript(ticketChannel);
            await logChannel.send({
                embeds: [embed],
                files: [transcript],
            });
        } catch (error) {
            client.logger.error('Failed to create transcript:', error);
            await logChannel.send({
                embeds: [embed],
                content: 'Failed to create transcript.',
            });
        }
    }
}
